package de.daniel.marlinghaus.vidr.vulnerability.report;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import de.daniel.marlinghaus.vidr.utils.configuration.JsonConfiguration;
import de.daniel.marlinghaus.vidr.utils.string.StringUtils;
import de.daniel.marlinghaus.vidr.vulnerability.report.vo.GavDependency;
import de.daniel.marlinghaus.vidr.vulnerability.report.vo.TrivyReport;
import de.daniel.marlinghaus.vidr.vulnerability.report.vo.TrivyVulnerability;
import de.daniel.marlinghaus.vidr.vulnerability.report.vo.VulnerabilityReport;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Path;
import org.codehaus.groovy.util.StringUtil;

public class TrivyReportDeserializer implements
    VulnerabilityReportDeserializer<TrivyVulnerability> {

  private OutputStream reportFile;
  private final ObjectMapper objectMapper = JsonConfiguration.objectMapper();

  @Override
  public VulnerabilityReport<TrivyVulnerability> deserialize(Path report) throws IOException {
    if (objectMapper.canDeserialize(objectMapper.constructType(TrivyVulnerability.class))) {
      TrivyReport reportResult = objectMapper.readValue(report.toFile(),
          new TypeReference<>() {
          });
      reportResult.getVulnerabilities().stream()
          .filter(v -> StringUtils.notBlank(v.getPackageName())).forEach(
              v -> {
                String[] packageSplit = v.getPackageName().split(":");
                v.setGavDependency(GavDependency.builder()
                    .group(packageSplit[0])
                    .artifact(packageSplit[1])
                    .build());
              }
          );
      return reportResult;
    } else {
      throw new RuntimeException(
          "TrivyVulnerability can't be deserialized");//TODO use custom exception
    }
  }

  @Override
  public VulnerabilityReport<?> deserialize(OutputStream report) {
    return null;
  }

  /**
   * @throws Exception
   */
  @Override
  public void close() throws Exception {
    reportFile.close();
  }
}
