package de.daniel.marlinghaus.vidr.vulnerability.scanner;

import de.daniel.marlinghaus.vidr.vulnerability.scanner.vo.ScanJob;
import de.daniel.marlinghaus.vidr.utils.http.OutputStreamHttpClientResponseHandler;
import de.daniel.marlinghaus.vidr.vulnerability.VulnerabilityIdentifier;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Path;
import lombok.Builder;
import org.apache.hc.client5.http.entity.mime.MultipartEntityBuilder;
import org.apache.hc.core5.http.ContentType;

@Builder
public class TrivyClientScanner extends HttpClientService {

  static final VulnerabilityIdentifier IDENTIFIER = VulnerabilityIdentifier.METADATA_DB_COMPARISION;
  static final String URL_PREFIX = "/trivy/mock"; //mock for manual testing

  /**
   * @return
   */
  @Override
  public VulnerabilityIdentifier getIdentifier() {
    return IDENTIFIER;
  }


  @Override
  protected String getUrlPrefix() {
    return URL_PREFIX;
  }

  @Override
  public OutputStream scan(ScanJob job, Path scanObject) throws IOException, Exception {

    // configure post
    httpPost.addHeader("content-type",
        String.format("%s; boundary=\"%s\"", ContentType.MULTIPART_FORM_DATA.getMimeType(),
            CONTENT_BOUNDARY));
    httpPost.setEntity(MultipartEntityBuilder.create()
        .addTextBody("scanJob", objectMapper.writeValueAsString(job), ContentType.APPLICATION_JSON)
        .setBoundary(CONTENT_BOUNDARY)
        .addBinaryBody("scanObject", scanObject.toFile(), ContentType.APPLICATION_JSON,
            scanObject.getFileName().toString()).setBoundary(CONTENT_BOUNDARY).build());

    return httpClient.execute(httpHost, httpPost,
        new OutputStreamHttpClientResponseHandler()); // do post on trivy rest client
  }
}
