package de.daniel.marlinghaus.vidr.vulnerability.resolve;

import de.daniel.marlinghaus.vidr.vulnerability.report.VulnerabilityReportDeserializer;
import de.daniel.marlinghaus.vidr.vulnerability.report.vo.Vulnerability;
import de.daniel.marlinghaus.vidr.vulnerability.report.vo.VulnerabilityReport;
import de.daniel.marlinghaus.vidr.vulnerability.resolve.vo.GavVulnerableDependency;
import groovyjarjarantlr4.v4.runtime.misc.MultiMap;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import lombok.Builder.Default;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class VulnerableDependencyFixResolver {

  @Default
  private List<GavVulnerableDependency> fixableDependencies = new ArrayList<>();

  private final VulnerabilityReportDeserializer<?> reportDeserializer;

  //Hinweis: Inkompatibilitätsbeheber kann die fixes versionen als Orientierung nutzen

  /**
   * @param report vulnerabilites from report with cve and dependency (as packageName) to be fixed
   * @return list of fixed dependencies (may differ from fixable list)
   */
  public List<GavVulnerableDependency> resolveFixes(List<Vulnerability> report) {

//    MultiMap
    //cluster vulnerabilities with same dependency
//    Map<String, List<Vulnerability>> clusteredVulnerabilities = report.stream().map(v -> {
//
//    });

    //filtere die größte fix version von jeder vulnerability mit severity >= HIGH (eventuell alle versionen der neuesten critical severity),
    //sortiere nach größe aufsteigend,
    //nehme die erste version die größer ist als die aktuelle,
    //vergleiche ob die version in fixes mit der höchsten severity vorkommt,
    //sonst nehme hier die nächst größere im Vergleich zu der aktuellen version

    //erstelle dependencies mit reportDeserializer

    //ändere die versionen der betroffenen dependencies auf die gefixten
    //baue das projekt mit den geänderten versionen oder erstelle neue sbom, je nach implementierung für prüfung
    //was wenn nicht baubar? Kann Plugin weiterlaufen?
    return fixableDependencies;
  }

}
