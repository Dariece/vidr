package de.daniel.marlinghaus.vidr.vulnerability;

import de.daniel.marlinghaus.vidr.vulnerability.VulnerabilityScanStrategyDeterminer.VulnerabilityStrategyParams;
import de.daniel.marlinghaus.vidr.vulnerability.scanner.SteadyClientScanner;
import de.daniel.marlinghaus.vidr.vulnerability.scanner.TrivyClientScanner;
import de.daniel.marlinghaus.vidr.vulnerability.scanner.VulnerabilityScanner;
import java.net.URI;
import java.util.List;
import org.gradle.api.provider.Property;
import org.gradle.api.services.BuildService;
import org.gradle.api.services.BuildServiceParameters;
import org.gradle.api.tasks.Input;

/**
 * Determines the scan strategy by identifier.
 */
public abstract class VulnerabilityScanStrategyDeterminer implements
    BuildService<VulnerabilityStrategyParams> {

  /**
   * Available strategies to scan vulnerabilities.
   */
  //TODO use Reflaction or something else to determine depending strategies
  private final List<VulnerabilityScanner> vulnerabilityStrategies = List.of(
      TrivyClientScanner.builder().build(),
      SteadyClientScanner.builder().build()
  );

  /**
   * Parameters that are needed to determine the Strategy.
   */
  public interface VulnerabilityStrategyParams extends BuildServiceParameters {

    /**
     * @return Property<VulnerabilityIdentifier> configured identifier for vulnerarbility scan
     * service.
     */
    @Input
    Property<VulnerabilityIdentifier> getIdentifier();
  }

  /**
   * Determines the scan strategy by identifier
   *
   * @param serviceUrl url of the host that is used by the scanner strategy
   * @return determined scanner strategy
   */
  public VulnerabilityScanner determineScanService(URI serviceUrl) {
    return vulnerabilityStrategies.stream()
        .filter(s -> getParameters().getIdentifier().get().equals(s.getIdentifier()))
        .peek(s -> s.initClient(
            serviceUrl)) //TODO get url per property so its available in constructor
        .findFirst()
        .orElseThrow(() -> new RuntimeException(
            "No matching vulnerabilityService found")); //TODO use custom exception
  }

}
