package de.daniel.marlinghaus.vidr.vulnerability;

import de.daniel.marlinghaus.vidr.vulnerability.VulnerabilityScanStrategyDeterminer.Params;
import de.daniel.marlinghaus.vidr.vulnerability.services.SteadyClientService;
import de.daniel.marlinghaus.vidr.vulnerability.services.TrivyClientService;
import de.daniel.marlinghaus.vidr.vulnerability.services.VulnerabilityScanService;
import java.net.URI;
import java.util.List;
import org.gradle.api.provider.Property;
import org.gradle.api.services.BuildService;
import org.gradle.api.services.BuildServiceParameters;
import org.gradle.api.tasks.Input;

public abstract class VulnerabilityScanStrategyDeterminer implements BuildService<Params> {

  //TODO use Reflaction or something else to determine depending strategies
  List<VulnerabilityScanService> vulnerabilityStrategies = List.of(
      TrivyClientService.builder().build(),
      SteadyClientService.builder().build()
  );

  public interface Params extends BuildServiceParameters {

    /**
     * @return Property<VulnerabilityIdentifier> configured Identifier for vulnerarbility scan
     * service
     */
    @Input
    Property<VulnerabilityIdentifier> getIdentifier();
  }

  public VulnerabilityScanService determineScanService(URI serviceUrl) {
    return vulnerabilityStrategies.stream()
        .filter(s -> getParameters().getIdentifier().get().equals(s.getIdentifier()))
        .peek(s -> s.initHttpClient(
            serviceUrl)) //TODO get url per property so its available in constructor
        .findFirst()
        .orElseThrow(() -> new RuntimeException(
            "No matching vulnerabilityService found")); //TODO use custom exception
  }

}
