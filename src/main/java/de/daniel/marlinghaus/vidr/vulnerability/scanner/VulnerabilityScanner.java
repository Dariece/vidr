package de.daniel.marlinghaus.vidr.vulnerability.scanner;


import de.daniel.marlinghaus.vidr.vulnerability.scanner.vo.ScanJob;
import de.daniel.marlinghaus.vidr.vulnerability.VulnerabilityIdentifier;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URI;
import java.nio.file.Path;

/**
 * Interface for vulnerability scanners
 */
public interface VulnerabilityScanner extends AutoCloseable {

  /**
   * Used to identify the fitting vulnerability scan strategy.
   */
  VulnerabilityIdentifier getIdentifier();

  /**
   * initialise client by host url
   *
   * @param url url to locate the host
   */
  void initClient(URI url);

  /**
   * Calls host via httpClient to execute the vulnerability scan for input scanObject, depending on
   * scanJob.
   *
   * @param job        tells host how to scan
   * @param scanObject the object to be scanned
   * @return ByteArrayOutputStream of received vulnerability scan report
   * @throws IOException if InputStream of client isn't treated properly
   * @throws Exception   unexpected failure
   */
  OutputStream scan(ScanJob job, Path scanObject) throws IOException, Exception;
}
