package de.daniel.marlinghaus.vidr.task;

import de.daniel.marlinghaus.vidr.task.vo.ScanJob;
import lombok.extern.slf4j.Slf4j;
import org.apache.hc.client5.http.classic.HttpClient;
import org.apache.hc.client5.http.classic.methods.HttpPost;
import org.apache.hc.client5.http.config.RequestConfig;
import org.apache.hc.client5.http.entity.mime.FileBody;
import org.apache.hc.client5.http.entity.mime.FormBodyPartBuilder;
import org.apache.hc.client5.http.entity.mime.MultipartEntityBuilder;
import org.apache.hc.client5.http.impl.classic.BasicHttpClientResponseHandler;
import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;
import org.apache.hc.core5.http.ContentType;
import org.gradle.api.DefaultTask;
import org.gradle.api.provider.Property;
import org.gradle.api.tasks.Input;
import org.gradle.api.tasks.TaskAction;
import org.gradle.internal.impldep.com.fasterxml.jackson.databind.ObjectMapper;
import org.gradle.internal.impldep.com.fasterxml.jackson.databind.json.JsonMapper;

import java.io.IOException;
import java.net.URI;
import java.nio.file.Path;

@Slf4j public abstract class CreateVulnerabilityReport extends DefaultTask {

    // abstract getter of type Property<T>

    /**
     * @return Property<URI> configured URL for vulnerarbility service
     */
    @Input public abstract Property<URI> getServiceUrl();

    @Input public abstract Property<Path> getScanObjectFile();

    @Input public abstract Property<ScanJob> getScanJob();

    //TODO Move to gradle service
    private HttpPost post;
    private HttpClient httpClient;
    private final ObjectMapper objectMapper = new JsonMapper();

    @TaskAction void run() throws IOException {
        // build post
        URI trivyRestClientUri =
            getServiceUrl().getOrElse(URI.create("localhost:8100")).resolve("trivy/scan");
        Path scanObjectFile = getScanObjectFile().get();
        String filename = scanObjectFile.getFileName().toString();
        ScanJob scanJob = getScanJob().get();

        post = new HttpPost(trivyRestClientUri);
        post.addHeader("content-type", String.format("%s; boundary=\"---Content Boundary\"",
            ContentType.MULTIPART_FORM_DATA.getMimeType()));
        post.setEntity(MultipartEntityBuilder.create()
            .addTextBody("scanJob", objectMapper.writeValueAsString(scanJob),
                ContentType.APPLICATION_JSON).addPart(FormBodyPartBuilder.create("scanObject",
                    new FileBody(scanObjectFile.toFile(), ContentType.APPLICATION_JSON, filename))
                .build()).build());

        // configure client
        httpClient =
            HttpClientBuilder.create().setDefaultRequestConfig(RequestConfig.DEFAULT).build();

        log.info("Start trivy scan for sbom {} on url {}", filename, trivyRestClientUri);
        System.out.println(
            "Start trivy scan for sbom " + trivyRestClientUri); // Use the `uri` property

        // do post on trivy rest client
        httpClient.execute(post, new BasicHttpClientResponseHandler());
    }
}
