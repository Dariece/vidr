package de.daniel.marlinghaus.vidr.task;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.json.JsonMapper;
import de.daniel.marlinghaus.vidr.task.vo.ScanFormat;
import de.daniel.marlinghaus.vidr.task.vo.ScanJob;
import de.daniel.marlinghaus.vidr.utils.http.InputStreamHttpClientResponseHandler;
import de.daniel.marlinghaus.vidr.utils.io.StreamUtils;
import java.io.IOException;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Path;
import lombok.Getter;
import lombok.Setter;
import org.apache.hc.client5.http.classic.methods.HttpPost;
import org.apache.hc.client5.http.config.RequestConfig;
import org.apache.hc.client5.http.entity.mime.MultipartEntityBuilder;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;
import org.apache.hc.core5.http.ContentType;
import org.apache.hc.core5.http.HttpHost;
import org.gradle.api.DefaultTask;
import org.gradle.api.provider.Property;
import org.gradle.api.tasks.Input;
import org.gradle.api.tasks.Optional;
import org.gradle.api.tasks.OutputFile;
import org.gradle.api.tasks.TaskAction;

public abstract class CreateVulnerabilityReport extends DefaultTask {

  private static final String CONTENT_BOUNDARY = "---Content Boundary";

  /**
   * configured filePath for the scanable Object file (now sbom)
   */
  @Setter
  public Path scanObjectFile;

  /**
   * configured job for scan reporting
   */
  @Setter
  private ScanJob scanJob;

  /**
   * @return Property<URI> configured URL for vulnerarbility service (now trivy)
   */
  @Input
  @Optional
  public abstract Property<URI> getServiceUrl();

  /**
   * file to write the scan result to for following tasks
   */
  @Getter
  @OutputFile
  @Optional
  private Path outputFile;

  @TaskAction
  void run() throws IOException {
    if (ScanFormat.SBOM.equals(scanJob.getFormat())) { //TODO strategy pattern

      // pre configuration
      URI trivyRestClientUri = getServiceUrl().getOrElse(
          URI.create("http://localhost:8100")); // define default url
      this.outputFile = scanObjectFile.getParent().resolve(
          String.format("%s-%s-%s-trivy-report.json",
              scanJob.getApplicationName(),
              scanJob.getStage(),
              scanJob.getPipelineRun()));// define output filename depending on scanJob
      Path scanObjectFile = this.scanObjectFile;
      String sbomFilename = scanObjectFile.getFileName().toString();
      ScanJob scanJob = this.scanJob;
      ObjectMapper objectMapper = new JsonMapper();
      var log = getLogger();

      // build post
      //TODO Move to gradle service
      HttpPost post = new HttpPost(trivyRestClientUri.resolve("/trivy/scan"));
      post.addHeader("content-type", String.format("%s; boundary=\"%s\"",
          ContentType.MULTIPART_FORM_DATA.getMimeType(), CONTENT_BOUNDARY));
      post.setEntity(MultipartEntityBuilder.create()
          .addTextBody("scanJob", objectMapper.writeValueAsString(scanJob),
              ContentType.APPLICATION_JSON)
          .setBoundary(CONTENT_BOUNDARY)
          .addBinaryBody("scanObject", scanObjectFile.toFile(), ContentType.APPLICATION_JSON,
              sbomFilename)
          .setBoundary(CONTENT_BOUNDARY)
          .build());

      log.info("Start trivy scan for sbom {} on url {}", sbomFilename, trivyRestClientUri);

      try (CloseableHttpClient httpClient = HttpClientBuilder.create()
          .setDefaultRequestConfig(RequestConfig.DEFAULT).build(); // configure client
          var in = httpClient.execute(HttpHost.create(trivyRestClientUri), post,
              new InputStreamHttpClientResponseHandler()); // do post on trivy rest client
          var out = Files.newOutputStream(outputFile)) {

        // write scan result to output file
        StreamUtils.copy(in, out);
      }

      log.info("Successful scanned sbom, write report to {}", outputFile.getFileName().toString());
    }
  }
}
