package de.daniel.marlinghaus.vidr.task;

import de.daniel.marlinghaus.vidr.vulnerability.scanner.vo.ScanFormat;
import de.daniel.marlinghaus.vidr.vulnerability.scanner.vo.ScanJob;
import de.daniel.marlinghaus.vidr.vulnerability.VulnerabilityScanStrategyDeterminer;
import de.daniel.marlinghaus.vidr.vulnerability.scanner.VulnerabilityScanner;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Path;
import lombok.Getter;
import lombok.Setter;
import org.gradle.api.DefaultTask;
import org.gradle.api.GradleException;
import org.gradle.api.provider.Property;
import org.gradle.api.tasks.Input;
import org.gradle.api.tasks.Internal;
import org.gradle.api.tasks.Optional;
import org.gradle.api.tasks.OutputFile;
import org.gradle.api.tasks.TaskAction;

public abstract class CreateVulnerabilityReport extends DefaultTask {

  /**
   * configured filePath for the scanable Object file (now sbom)
   */
  @Setter

  public Path scanObjectFile;

  /**
   * configured job for scan reporting
   */
  @Setter
  private ScanJob scanJob;

  /**
   * @return Property<VulnerabilityScanStrategyDeterminer> to determine a vulnerability scan
   * strategy that fits
   */
  @Internal
  public abstract Property<VulnerabilityScanStrategyDeterminer> getStrategyDeterminer();

  /**
   * @return Property<URI> configured URL for vulnerarbility service (now trivy)
   */
  @Input
  @Optional
  public abstract Property<URI> getServiceUrl();

  /**
   * file to write the scan result to for following tasks
   */
  @Getter
  @Setter
  @OutputFile
  @Optional
  private Path outputFile;

  @TaskAction
  void run() {
    if (ScanFormat.SBOM.equals(scanJob.getFormat())) { //TODO strategy pattern

      // pre configuration
      URI clientUrl = getServiceUrl().getOrElse(
          URI.create("http://localhost:8100")); // define default url

      getLogger().info("Start trivy scan for sbom {} on url {}", scanObjectFile.getFileName().toString(),
          clientUrl);

      try (VulnerabilityScanner scanService = getStrategyDeterminer().get()
          .determineScanService(clientUrl);
          OutputStream out = scanService.scan(scanJob,
              scanObjectFile); //execute scan
          OutputStream outFile = Files.newOutputStream(outputFile)) {
        getLogger().info("Successful scanned sbom, write report to {}", outputFile.getFileName().toString());
        // write scan result to output file
        ((ByteArrayOutputStream) out).writeTo(outFile);
      } catch (IOException e) {
        throw new GradleException("InputStream of client isn't treated properly, executing " + this.getClass().getName(), e); //TODO failure handling
      } catch (Exception e) {
        throw new GradleException("Unexpected failure occurred executing " + this.getClass().getName(), e); //TODO failure handling
      }

      getLogger().quiet("Finished vulnerability report creation", outputFile.getFileName().toString());
    }
  }
}
