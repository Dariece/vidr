package de.daniel.marlinghaus.vidr.task;

import de.daniel.marlinghaus.vidr.task.vo.ScanFormat;
import de.daniel.marlinghaus.vidr.task.vo.ScanJob;
import de.daniel.marlinghaus.vidr.utils.http.InputStreamHttpClientResponseHandler;
import de.daniel.marlinghaus.vidr.utils.io.StreamUtils;
import java.io.IOException;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Path;
import lombok.Setter;
import org.apache.hc.client5.http.classic.HttpClient;
import org.apache.hc.client5.http.classic.methods.HttpPost;
import org.apache.hc.client5.http.config.RequestConfig;
import org.apache.hc.client5.http.entity.mime.FileBody;
import org.apache.hc.client5.http.entity.mime.FormBodyPartBuilder;
import org.apache.hc.client5.http.entity.mime.MultipartEntityBuilder;
import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;
import org.apache.hc.core5.http.ContentType;
import org.gradle.api.DefaultTask;
import org.gradle.api.file.RegularFileProperty;
import org.gradle.api.provider.Property;
import org.gradle.api.tasks.Input;
import org.gradle.api.tasks.OutputFile;
import org.gradle.api.tasks.TaskAction;
import org.gradle.internal.impldep.com.fasterxml.jackson.databind.ObjectMapper;
import org.gradle.internal.impldep.com.fasterxml.jackson.databind.json.JsonMapper;

public abstract class CreateVulnerabilityReport extends DefaultTask {

  /**
   * configured filePath for the scanable Object file (now sbom)
   */
  @Setter
  public Path scanObjectFile;

  /**
   * configured job for scan reporting
   */
  @Setter
  private ScanJob scanJob;

  //TODO Move to gradle service
  private HttpPost post;
  private HttpClient httpClient;

  /**
   * @return Property<URI> configured URL for vulnerarbility service (now trivy)
   */
  @Input
  public abstract Property<URI> getServiceUrl();

  @OutputFile
  public abstract RegularFileProperty getOutputFile();

  @TaskAction
  void run() throws IOException {
    if (ScanFormat.SBOM.equals(scanJob.getFormat())) { //TODO strategy pattern

      URI trivyRestClientUri = getServiceUrl().getOrElse(
              URI.create("localhost:8100")) // define default url
          .resolve("trivy/scan");
      Path scanObjectFile = this.scanObjectFile;
      String filename = scanObjectFile.getFileName().toString();
      ScanJob scanJob = this.scanJob;
      ObjectMapper objectMapper = new JsonMapper();

      // build post
      post = new HttpPost(trivyRestClientUri);
      post.addHeader("content-type", String.format("%s; boundary=\"---Content Boundary\"",
          ContentType.MULTIPART_FORM_DATA.getMimeType()));
      post.setEntity(MultipartEntityBuilder.create()
          .addTextBody("scanJob", objectMapper.writeValueAsString(scanJob),
              ContentType.APPLICATION_JSON)
          .addPart(FormBodyPartBuilder.create("scanObject",
                  new FileBody(scanObjectFile.toFile(), ContentType.APPLICATION_JSON, filename))
              .build())
          .build());

      // configure client
      httpClient = HttpClientBuilder.create().setDefaultRequestConfig(RequestConfig.DEFAULT)
          .build();

      getLogger().info("Start trivy scan for sbom {} on url {}", filename, trivyRestClientUri);

      // do post on trivy rest client
      try (var in = httpClient.execute(post, new InputStreamHttpClientResponseHandler());
          var out = Files.newOutputStream(getOutputFile().get().getAsFile().toPath())) {
        // write scan result to output file
        StreamUtils.copy(in, out);
      }
    }
  }
}
