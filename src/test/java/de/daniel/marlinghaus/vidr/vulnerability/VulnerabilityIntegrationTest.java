package de.daniel.marlinghaus.vidr.vulnerability;

import static org.assertj.core.api.Assertions.assertThat;

import de.daniel.marlinghaus.vidr.utils.configuration.CustomVersionNumber;
import de.daniel.marlinghaus.vidr.vulnerability.report.TrivyReportDeserializer;
import de.daniel.marlinghaus.vidr.vulnerability.report.VulnerabilityReportDeserializer;
import de.daniel.marlinghaus.vidr.vulnerability.report.vo.CvssSeverity;
import de.daniel.marlinghaus.vidr.vulnerability.resolve.VulnerableDependencyFixResolver;
import de.daniel.marlinghaus.vidr.vulnerability.resolve.vo.GavVulnerableDependency;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.junit.jupiter.api.Test;

public class VulnerabilityIntegrationTest {

  private final Path reportFile = Paths.get("src", "test", "resources",
      "vulnerability-sbom-test-local-bec7c176-06db-4d76-8247-6686b73d761d-trivy-report.json");

  @Test
  void testVulnerabilityResolve() throws Exception {
    try (VulnerabilityReportDeserializer trivyReportDeserializer = new TrivyReportDeserializer()) {
      var result = trivyReportDeserializer.deserialize(reportFile);
      assertThat(result).isNotNull();
      assertThat(result).hasNoNullFieldsOrProperties();
      assertThat(result.getVulnerabilities()).isNotEmpty();

      VulnerableDependencyFixResolver<TrivyReportDeserializer> vulnerableDependencyFixResolver = new VulnerableDependencyFixResolver(
          trivyReportDeserializer);
      vulnerableDependencyFixResolver.resolveFixes(result.getVulnerabilities());

      var fixableDependencies = vulnerableDependencyFixResolver.getFixableDependencies();
      var unfixableDependencies = vulnerableDependencyFixResolver.getUnfixableDependencies();
      assertThat(fixableDependencies).isNotEmpty();
      assertThat(fixableDependencies).contains(
          GavVulnerableDependency.builder()
              .artifact("jackson-databind")
              .group("com.fasterxml.jackson.core")
              .version("2.13.2")
              .versionNumber(CustomVersionNumber.parse("2.13.2"))
              //TODO fix fixversion null
              .fixVersion("2.13.4.1")
              //TODO fix version schema from 2.13.4-1 to 2.13.4.1
              .fixVersionNumber(CustomVersionNumber.parse("2.13.4.1"))
              .severity(CvssSeverity.HIGH).build());
      assertThat(unfixableDependencies).isNotEmpty();
      assertThat(unfixableDependencies).contains(
          GavVulnerableDependency.builder()
              .artifact("spring-boot-starter-web")
              .group("org.springframework.boot")
              .version("2.6.5")
              .versionNumber(CustomVersionNumber.parse("2.6.5"))
              .fixVersionNumber(CustomVersionNumber.parse("2.6.6"))
              .severity(CvssSeverity.UNKNOWN).build());
    }
  }

}
