package de.daniel.marlinghaus.vidr.vulnerability.report;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatCode;

import de.daniel.marlinghaus.vidr.utils.configuration.CustomVersionNumber;
import de.daniel.marlinghaus.vidr.vulnerability.report.vo.CvssSeverity;
import de.daniel.marlinghaus.vidr.vulnerability.report.vo.Vulnerability;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import org.junit.jupiter.api.Test;

class TrivyReportDeserializerTest {

  private final Path reportFile = Paths.get("src", "test", "resources",
      "vulnerability-sbom-test-local-bec7c176-06db-4d76-8247-6686b73d761d-trivy-report.json");

  @Test
  void deserializeTest() {

    assertThatCode(() -> {
      try (TrivyReportDeserializer trivyReportDeserializer = new TrivyReportDeserializer()) {
        var actualResult = trivyReportDeserializer.deserialize(reportFile);
        var actualFirstVulnerability = actualResult.getVulnerabilities().get(0);
//        System.out.println(actualResult.toPrettifiedString()); //just for debugging

        assertThat(actualResult).isNotNull();
        assertThat(actualResult).hasNoNullFieldsOrProperties();
        assertThat(actualResult.getVulnerabilities()).isNotEmpty();

        assertThat(actualFirstVulnerability.getFixedVersions().size()).isEqualTo(2);
        assertThat(actualFirstVulnerability.getDependencyName()).isEqualTo(
            "com.fasterxml.jackson.core:jackson-databind");
        assertThat(actualFirstVulnerability.getSeverity()).isEqualTo(CvssSeverity.HIGH);
        assertThat(actualFirstVulnerability.getActualVersion()).isEqualTo("2.13.2");
        assertThat(actualFirstVulnerability.getFixedVersions()).isEqualTo(
            List.of("2.12.6.1", "2.13.2.1"));
        assertThat(actualFirstVulnerability.getCveId()).isEqualTo("CVE-2020-36518");
        assertThat(actualFirstVulnerability.getCveTitle()).isEqualTo(
            "jackson-databind: denial of service via a large depth of nested objects");

        //test single extraction
        testExtractSinglePositive(actualFirstVulnerability, trivyReportDeserializer);
        testExtractSingleWithNullInput(actualFirstVulnerability, trivyReportDeserializer);
        testExtractSingleNegative(actualFirstVulnerability, trivyReportDeserializer);
      }
    }).doesNotThrowAnyException();
  }

  private void testExtractSinglePositive(Vulnerability vulnerability,
      VulnerabilityReportDeserializer reportDeserializer) {
    var actualVulnerableDependency = reportDeserializer.extractVulnerableDependency(vulnerability,
        CustomVersionNumber.parse("2.13.4.1"), "2.13.4.1");

    assertThat(actualVulnerableDependency).isNotNull();
    assertThat(actualVulnerableDependency).hasNoNullFieldsOrProperties();
    assertThat(actualVulnerableDependency.getName()).isEqualTo("jackson-databind");
    assertThat(actualVulnerableDependency.getVersion()).isEqualTo("2.13.2");
    assertThat(actualVulnerableDependency.getVersionNumber()).isEqualTo(
        CustomVersionNumber.parse("2.13.2"));
    assertThat(actualVulnerableDependency.getFixVersion()).isEqualTo("2.13.4.1");
    assertThat(actualVulnerableDependency.getFixVersionNumber()).isEqualTo(
        CustomVersionNumber.parse("2.13.4.1"));
  }

  private void testExtractSingleWithNullInput(Vulnerability vulnerability,
      VulnerabilityReportDeserializer reportDeserializer) {
    var actualVulnerableDependency = reportDeserializer.extractVulnerableDependency(vulnerability,
        null, null);

    assertThat(actualVulnerableDependency).isNotNull();
    assertThat(actualVulnerableDependency).hasNoNullFieldsOrProperties();
    assertThat(actualVulnerableDependency.getName()).isEqualTo("jackson-databind");
    assertThat(actualVulnerableDependency.getVersion()).isEqualTo("2.13.2");
    assertThat(actualVulnerableDependency.getVersionNumber()).isEqualTo(
        CustomVersionNumber.parse("2.13.2"));
    assertThat(actualVulnerableDependency.getFixVersion()).isEqualTo("2.13.2.1");
    assertThat(actualVulnerableDependency.getFixVersionNumber()).isEqualTo(
        CustomVersionNumber.parse("2.13.2.1"));
  }

  private void testExtractSingleNegative(Vulnerability vulnerability,
      VulnerabilityReportDeserializer reportDeserializer) {
    var modifiedVulnerability = vulnerability;
    modifiedVulnerability.setFixedVersions(List.of());
    var actualVulnerableDependency = reportDeserializer.extractVulnerableDependency(vulnerability,
        null, null);

    assertThat(actualVulnerableDependency).isNotNull();
    assertThat(actualVulnerableDependency.getName()).isEqualTo("jackson-databind");
    assertThat(actualVulnerableDependency.getVersion()).isEqualTo("2.13.2");
    assertThat(actualVulnerableDependency.getVersionNumber()).isEqualTo(
        CustomVersionNumber.parse("2.13.2"));
    assertThat(actualVulnerableDependency.getFixVersion()).isEqualTo(null);
    assertThat(actualVulnerableDependency.getFixVersionNumber()).isEqualTo(null);
  }
}
