package de.daniel.marlinghaus.vidr.vulnerability.report.vo;


import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;

import de.daniel.marlinghaus.vidr.vulnerability.report.vo.trivy.TrivyVulnerability;
import java.util.List;
import java.util.NoSuchElementException;
import org.gradle.util.internal.VersionNumber;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class VulnerabilityTest {

  private Vulnerability defaultVulnerability;

  @BeforeEach
  void setUp() {
    defaultVulnerability = TrivyVulnerability.
        builder()
        .actualVersion("1.0.0")
        .cveId("Test CVE")
        .cveTitle("Test title")
        .fixedVersions(
            List.of("1.0.1", "1.0.2", "1.1.0", "1.0.10", "1.10.0", "2.0.0", "2.0.2", "1.0.3"))
        .dependencyName("de.gruppe:artefakt")
        .severity(CvssSeverity.HIGH)
        .build();
  }

  @Test
  void testIsFixablePositive() {
    assertThat(defaultVulnerability.isFixable()).isTrue();
  }

  @Test
  void testIsFixableNegative() {
    defaultVulnerability.setFixedVersions(List.of());
    assertThat(defaultVulnerability.isFixable()).isFalse();
  }

  @Test
  void testGetMaxFixVersionPositive() {
    var result = defaultVulnerability.getMaxFixVersion();
    assertThat(result).isNotNull();
    assertThat(result).isEqualByComparingTo(VersionNumber.parse("2.0.2"));
  }

  @Test
  void testGetMaxFixVersionNegative() {
    defaultVulnerability.setFixedVersions(List.of());
    assertThrows(NoSuchElementException.class, () -> defaultVulnerability.getMaxFixVersion());
  }

  @Test
  void testCheckSeverityIsHigherThanMediumPositive() {
    assertThat(Vulnerability.checkSeverityIsHigherThanMedium(defaultVulnerability)).isTrue();
  }

  @Test
  void testCheckSeverityIsHigherThanMediumNegative() {
    defaultVulnerability.setSeverity(CvssSeverity.MEDIUM);
    assertThat(Vulnerability.checkSeverityIsHigherThanMedium(defaultVulnerability)).isFalse();
  }
}
